{"ast":null,"code":"const bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/User');\nconst AuthService = {\n  registerUser: async userData => {\n    const {\n      username,\n      email,\n      password\n    } = userData;\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newUser = new User({\n      username,\n      email,\n      password: hashedPassword\n    });\n    await newUser.save();\n    return newUser;\n  },\n  loginUser: async (email, password) => {\n    const user = await User.findOne({\n      email\n    });\n    if (!user) {\n      throw new Error('User not found');\n    }\n    const passwordMatch = await bcrypt.compare(password, user.password);\n    if (!passwordMatch) {\n      throw new Error('Invalid credentials');\n    }\n    return user;\n  },\n  generateToken: user => {\n    const token = jwt.sign({\n      userId: user._id,\n      username: user.username,\n      isAdmin: user.isAdmin\n    }, 'your-secret-key', {\n      expiresIn: '1h'\n    } // Token expiration time\n    );\n\n    return token;\n  }\n};\nmodule.exports = AuthService;","map":{"version":3,"names":["bcrypt","require","jwt","User","AuthService","registerUser","userData","username","email","password","hashedPassword","hash","newUser","save","loginUser","user","findOne","Error","passwordMatch","compare","generateToken","token","sign","userId","_id","isAdmin","expiresIn","module","exports"],"sources":["/Users/kristo/kristos-closet/client/closet-app/src/controllers/authService.js"],"sourcesContent":["const bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/User');\n\nconst AuthService = {\n  registerUser: async (userData) => {\n    const { username, email, password } = userData;\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    const newUser = new User({\n      username,\n      email,\n      password: hashedPassword,\n    });\n\n    await newUser.save();\n    return newUser;\n  },\n\n  loginUser: async (email, password) => {\n    const user = await User.findOne({ email });\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const passwordMatch = await bcrypt.compare(password, user.password);\n    if (!passwordMatch) {\n      throw new Error('Invalid credentials');\n    }\n\n    return user;\n  },\n\n  generateToken: (user) => {\n    const token = jwt.sign(\n      { userId: user._id, username: user.username, isAdmin: user.isAdmin },\n      'your-secret-key',\n      { expiresIn: '1h' } // Token expiration time\n    );\n\n    return token;\n  },\n};\n\nmodule.exports = AuthService;\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,GAAG,GAAGD,OAAO,CAAC,cAAc,CAAC;AACnC,MAAME,IAAI,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAEtC,MAAMG,WAAW,GAAG;EAClBC,YAAY,EAAE,MAAOC,QAAQ,IAAK;IAChC,MAAM;MAAEC,QAAQ;MAAEC,KAAK;MAAEC;IAAS,CAAC,GAAGH,QAAQ;IAC9C,MAAMI,cAAc,GAAG,MAAMV,MAAM,CAACW,IAAI,CAACF,QAAQ,EAAE,EAAE,CAAC;IAEtD,MAAMG,OAAO,GAAG,IAAIT,IAAI,CAAC;MACvBI,QAAQ;MACRC,KAAK;MACLC,QAAQ,EAAEC;IACZ,CAAC,CAAC;IAEF,MAAME,OAAO,CAACC,IAAI,CAAC,CAAC;IACpB,OAAOD,OAAO;EAChB,CAAC;EAEDE,SAAS,EAAE,MAAAA,CAAON,KAAK,EAAEC,QAAQ,KAAK;IACpC,MAAMM,IAAI,GAAG,MAAMZ,IAAI,CAACa,OAAO,CAAC;MAAER;IAAM,CAAC,CAAC;IAC1C,IAAI,CAACO,IAAI,EAAE;MACT,MAAM,IAAIE,KAAK,CAAC,gBAAgB,CAAC;IACnC;IAEA,MAAMC,aAAa,GAAG,MAAMlB,MAAM,CAACmB,OAAO,CAACV,QAAQ,EAAEM,IAAI,CAACN,QAAQ,CAAC;IACnE,IAAI,CAACS,aAAa,EAAE;MAClB,MAAM,IAAID,KAAK,CAAC,qBAAqB,CAAC;IACxC;IAEA,OAAOF,IAAI;EACb,CAAC;EAEDK,aAAa,EAAGL,IAAI,IAAK;IACvB,MAAMM,KAAK,GAAGnB,GAAG,CAACoB,IAAI,CACpB;MAAEC,MAAM,EAAER,IAAI,CAACS,GAAG;MAAEjB,QAAQ,EAAEQ,IAAI,CAACR,QAAQ;MAAEkB,OAAO,EAAEV,IAAI,CAACU;IAAQ,CAAC,EACpE,iBAAiB,EACjB;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IACtB,CAAC;;IAED,OAAOL,KAAK;EACd;AACF,CAAC;AAEDM,MAAM,CAACC,OAAO,GAAGxB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}
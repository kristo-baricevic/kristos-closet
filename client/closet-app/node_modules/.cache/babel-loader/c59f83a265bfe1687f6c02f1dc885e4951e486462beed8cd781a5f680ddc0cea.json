{"ast":null,"code":"import axios from \"axios\";\n\n//set authentication status\n// export const setAuthentication = (isAuthenticated) => ({\n//     type: 'SET_AUTHENTICATION',\n//     payload: isAuthenticated,\n//   });\n\n// //set user data\n// export const setUser = (user) => ({\n//   type: 'SET_USER',\n//   payload: user,\n// });\n\n// //clear authentication status  \n// export const clearAuthentication = () => ({\n//   type: 'CLEAR_AUTHENTICATION',\n// });\n\n//manage modals\nexport const showLoginModal = () => ({\n  type: 'SET_LOGIN_MODAL_VISIBLE',\n  payload: true\n});\nexport const closeLoginModal = () => ({\n  type: 'SET_LOGIN_MODAL_VISIBLE',\n  payload: false\n});\nexport const showRegistrationModal = () => ({\n  type: 'SET_REGISTRATION_MODAL_VISIBLE',\n  payload: true\n});\nexport const closeRegistrationModal = () => ({\n  type: 'SET_REGISTRATION_MODAL_VISIBLE',\n  payload: false\n});\nexport const setRegistrationModalVisible = visible => ({\n  type: 'SET_REGISTRATION_MODAL_VISIBLE',\n  payload: visible\n});\nexport const setLoginModalVisible = visible => ({\n  type: 'SET_LOGIN_MODAL_VISIBLE',\n  payload: visible\n});\n\n// upload action types\nexport const UPLOAD_IMAGE_REQUEST = 'UPLOAD_IMAGE_REQUEST';\nexport const UPLOAD_IMAGE_SUCCESS = 'UPLOAD_IMAGE_SUCCESS';\nexport const UPLOAD_IMAGE_FAILURE = 'UPLOAD_IMAGE_FAILURE';\n\n// Thunk action to log in user\n// export const loginUser = (userData) => {\n//   return async (dispatch) => {\n//     try {\n//       console.log(\"inside login try\");\n//       const response = await axios.post('http://localhost:5000/api/login', userData);\n\n//       if (response.status === 200) {\n//         const user = response.data.user;\n//         const token = response.data.token; \n//         console.log(\"user data\", user);\n//         console.log(\"token\", token);\n\n//         // Set the token in client storage\n//         localStorage.setItem('token', token);\n\n//         console.log(\"client side token\", token);\n\n//         dispatch(loginSuccess(user));\n//         return console.log(user);\n//       }\n//     } catch (error) {\n//       dispatch({\n//         type: 'LOGIN_USER_ERROR',\n//         payload: error.message,\n//       });        \n//     }\n//   };\n// };\n\n// action creator fo successful login\n// export const loginSuccess = (user) => ({\n//   type: 'LOGIN_USER_SUCCESS',\n//   payload: user,\n// });\n\n// // action creator fo successful logout\n// export const logoutUser = () => ({\n//   type: 'LOGOUT_USER', \n// });\n\n// // Thunk action to register user\n// export const registerUser = (userData) => {\n//   console.log(\"registerUser has run\");\n//   return async (dispatch) => {\n//     try {\n//       console.log(\"userData about to post\");\n//       const response = await axios.post('http://localhost:5000/api/register', userData);\n//       console.log(\"userData posted\");\n\n//       if (response.status === 201) {\n//         dispatch({\n//           type: 'REGISTER_USER_SUCCESS',\n//           payload: response.data,\n//         });\n//       }\n//     } catch (error) {\n//       dispatch({\n//         type: 'REGISTER_USER_ERROR',\n//         payload: error.message,\n//       });\n//     }\n//   };\n// };\n\n// Thunk action to perform anonymous login\n// export const loginAnonymous = () => async (dispatch) => {\n//   try {\n//     const response = await axios.post('http://localhost:5000/api/loginAnonymous');\n//     // console.log('Response data:', response.data);\n\n//     const isAuthenticated = response.data.isAuthenticated;\n//     const user = response.data.user;\n//     const token = response.data.token;\n\n//     // Save token in local storage\n//     localStorage.setItem('token', token);\n\n//     // Include JWT token\n//     const headers = {\n//       Authorization: `Bearer ${token}`,\n//     };\n\n//     // Dispatch actions to update the Redux store\n//     dispatch({ type: 'SET_AUTHENTICATION', payload: isAuthenticated });\n//     dispatch({ type: 'SET_USER', payload: user });\n//   } catch (error) {\n//     // Handle login error\n//     console.error('Login failed:', error);\n//   }\n// };\n\n// Action creators for image upload\nexport const uploadImageRequest = () => ({\n  type: UPLOAD_IMAGE_REQUEST\n});\nexport const uploadImageSuccess = () => ({\n  type: UPLOAD_IMAGE_SUCCESS\n});\nexport const uploadImageFailure = error => ({\n  type: UPLOAD_IMAGE_FAILURE,\n  error\n});\n\n// Thunk action to upload an image and metadata\nexport const uploadImageAndMetaData = (imageFile, dbFormData) => async dispatch => {\n  dispatch(uploadImageRequest());\n  console.log(\"inside action for upload\");\n  try {\n    const token = localStorage.getItem('token');\n    const headers = {\n      'Authorization': `Bearer ${token}`\n    };\n    console.log(\"form data in actions\", dbFormData);\n    console.log(\"imageFile in the actions\", imageFile);\n\n    // Combine the data for both requests\n    const combinedFormData = new FormData();\n    combinedFormData.append('imageFile', imageFile);\n    for (const [key, value] of dbFormData.entries()) {\n      combinedFormData.append(key, value);\n    }\n    console.log(\"combined form data\", combinedFormData);\n\n    // Upload data to backend\n    const uploadPromise = axios.post('http://localhost:5000/api/upload', combinedFormData, {\n      headers\n    });\n    await uploadPromise;\n    dispatch(uploadImageSuccess());\n  } catch (error) {\n    dispatch(uploadImageFailure(error));\n  }\n};","map":{"version":3,"names":["axios","showLoginModal","type","payload","closeLoginModal","showRegistrationModal","closeRegistrationModal","setRegistrationModalVisible","visible","setLoginModalVisible","UPLOAD_IMAGE_REQUEST","UPLOAD_IMAGE_SUCCESS","UPLOAD_IMAGE_FAILURE","uploadImageRequest","uploadImageSuccess","uploadImageFailure","error","uploadImageAndMetaData","imageFile","dbFormData","dispatch","console","log","token","localStorage","getItem","headers","combinedFormData","FormData","append","key","value","entries","uploadPromise","post"],"sources":["/Users/kristo/kristos-closet/client/closet-app/src/store/actions.js"],"sourcesContent":["import axios from \"axios\";\n\n\n//set authentication status\n// export const setAuthentication = (isAuthenticated) => ({\n//     type: 'SET_AUTHENTICATION',\n//     payload: isAuthenticated,\n//   });\n\n// //set user data\n// export const setUser = (user) => ({\n//   type: 'SET_USER',\n//   payload: user,\n// });\n\n// //clear authentication status  \n// export const clearAuthentication = () => ({\n//   type: 'CLEAR_AUTHENTICATION',\n// });\n  \n//manage modals\nexport const showLoginModal = () => ({\n  type: 'SET_LOGIN_MODAL_VISIBLE',\n  payload: true,\n});\n  \nexport const closeLoginModal = () => ({\n  type: 'SET_LOGIN_MODAL_VISIBLE',\n  payload: false,\n});\n  \nexport const showRegistrationModal = () => ({\n  type: 'SET_REGISTRATION_MODAL_VISIBLE',\n  payload: true,\n});\n  \nexport const closeRegistrationModal = () => ({\n  type: 'SET_REGISTRATION_MODAL_VISIBLE',\n  payload: false,\n});\n\nexport const setRegistrationModalVisible = (visible) => ({\n  type: 'SET_REGISTRATION_MODAL_VISIBLE',\n  payload: visible,\n});\n  \nexport const setLoginModalVisible = (visible) => ({\n  type: 'SET_LOGIN_MODAL_VISIBLE',\n  payload: visible,\n});\n\n// upload action types\nexport const UPLOAD_IMAGE_REQUEST = 'UPLOAD_IMAGE_REQUEST';\nexport const UPLOAD_IMAGE_SUCCESS = 'UPLOAD_IMAGE_SUCCESS';\nexport const UPLOAD_IMAGE_FAILURE = 'UPLOAD_IMAGE_FAILURE';\n\n// Thunk action to log in user\n// export const loginUser = (userData) => {\n//   return async (dispatch) => {\n//     try {\n//       console.log(\"inside login try\");\n//       const response = await axios.post('http://localhost:5000/api/login', userData);\n\n//       if (response.status === 200) {\n//         const user = response.data.user;\n//         const token = response.data.token; \n//         console.log(\"user data\", user);\n//         console.log(\"token\", token);\n\n//         // Set the token in client storage\n//         localStorage.setItem('token', token);\n\n//         console.log(\"client side token\", token);\n\n//         dispatch(loginSuccess(user));\n//         return console.log(user);\n//       }\n//     } catch (error) {\n//       dispatch({\n//         type: 'LOGIN_USER_ERROR',\n//         payload: error.message,\n//       });        \n//     }\n//   };\n// };\n\n// action creator fo successful login\n// export const loginSuccess = (user) => ({\n//   type: 'LOGIN_USER_SUCCESS',\n//   payload: user,\n// });\n\n// // action creator fo successful logout\n// export const logoutUser = () => ({\n//   type: 'LOGOUT_USER', \n// });\n\n// // Thunk action to register user\n// export const registerUser = (userData) => {\n//   console.log(\"registerUser has run\");\n//   return async (dispatch) => {\n//     try {\n//       console.log(\"userData about to post\");\n//       const response = await axios.post('http://localhost:5000/api/register', userData);\n//       console.log(\"userData posted\");\n  \n//       if (response.status === 201) {\n//         dispatch({\n//           type: 'REGISTER_USER_SUCCESS',\n//           payload: response.data,\n//         });\n//       }\n//     } catch (error) {\n//       dispatch({\n//         type: 'REGISTER_USER_ERROR',\n//         payload: error.message,\n//       });\n//     }\n//   };\n// };\n\n// Thunk action to perform anonymous login\n// export const loginAnonymous = () => async (dispatch) => {\n//   try {\n//     const response = await axios.post('http://localhost:5000/api/loginAnonymous');\n//     // console.log('Response data:', response.data);\n\n//     const isAuthenticated = response.data.isAuthenticated;\n//     const user = response.data.user;\n//     const token = response.data.token;\n\n//     // Save token in local storage\n//     localStorage.setItem('token', token);\n\n//     // Include JWT token\n//     const headers = {\n//       Authorization: `Bearer ${token}`,\n//     };\n  \n//     // Dispatch actions to update the Redux store\n//     dispatch({ type: 'SET_AUTHENTICATION', payload: isAuthenticated });\n//     dispatch({ type: 'SET_USER', payload: user });\n//   } catch (error) {\n//     // Handle login error\n//     console.error('Login failed:', error);\n//   }\n// };\n\n// Action creators for image upload\nexport const uploadImageRequest = () => ({\n  type: UPLOAD_IMAGE_REQUEST,\n});\n\nexport const uploadImageSuccess = () => ({\n  type: UPLOAD_IMAGE_SUCCESS,\n});\n\nexport const uploadImageFailure = error => ({\n  type: UPLOAD_IMAGE_FAILURE,\n  error,\n});\n\n// Thunk action to upload an image and metadata\nexport const uploadImageAndMetaData = (imageFile, dbFormData) => async (dispatch) => {\n  dispatch(uploadImageRequest());\n  console.log(\"inside action for upload\");\n  try {\n    const token = localStorage.getItem('token');\n    const headers = {\n      'Authorization': `Bearer ${token}`,\n    };\n\n    console.log(\"form data in actions\",dbFormData);\n    console.log(\"imageFile in the actions\", imageFile);\n\n    // Combine the data for both requests\n    const combinedFormData = new FormData();\n    combinedFormData.append('imageFile', imageFile);\n    for (const [key, value] of dbFormData.entries()) {\n      combinedFormData.append(key, value);\n    }\n\n    console.log(\"combined form data\", combinedFormData);\n\n    // Upload data to backend\n    const uploadPromise = axios.post('http://localhost:5000/api/upload', combinedFormData, { headers });\n\n    await uploadPromise;\n\n    dispatch(uploadImageSuccess());\n  } catch (error) {\n    dispatch(uploadImageFailure(error));\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
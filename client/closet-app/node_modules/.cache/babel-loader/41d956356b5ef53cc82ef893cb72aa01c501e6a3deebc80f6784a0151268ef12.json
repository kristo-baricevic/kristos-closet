{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { removeItem } from '../features/selectedItemsSlice.js'\n\n// const OutfitView = () => {\n//   const [isDesktop, setIsDesktop] = useState(false);\n\n//   const selectedItems = useSelector(state => state.selectedItems);\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     setIsDesktop(window.innerWidth >= 768);\n\n//     const handleResize = () => {\n//       setIsDesktop(window.innerWidth >= 768);\n//     };\n\n//     window.addEventListener('resize', handleResize);\n//     return () => {\n//       window.removeEventListener('resize', handleResize);\n//     };\n//   }, []);\n\n//   const removeSelectedItem = (item, category) => {\n//     dispatch(removeItem({ category, itemId: item.id }));\n//   };\n\n//   const filteredSelectedItems = Object.keys(selectedItems).reduce((acc, category) => {\n//     if (category !== \"accessory\") {\n//       acc[category] = selectedItems[category];\n//     }\n//     return acc;\n//   }, {});\n\n//   const getImageUrl = (imageData) => {\n//     if (!imageData) {\n//       console.error('Invalid image data:', imageData);\n//       return null;\n//     }\n\n//     return `data:${imageData.ContentType};base64,${imageData.imageData}`;\n//   };\n\n//   return (\n//     <div>\n//       {isDesktop ? (\n//         <div className=\"outfit-view-desktop\">\n//           <div className=\"outfit-view-container-desktop\">\n//             <div className=\"outfit-view\">\n//               {Object.entries(filteredSelectedItems).map(([category, item]) => (\n//                 <div key={category} className=\"item\">\n//                   <div className=\"item-image-wrapper\">\n//                     <img src={getImageUrl(item)} alt=\"Selected Item\" />\n//                   </div>\n//                   <div className=\"item-info\">\n//                     <div>{category}</div>\n//                     <button className=\"outfit-remove-button\" onClick={() => removeSelectedItem(item, category)}>Remove</button>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//             {/* <div className=\"accessory-view\">\n//               {selectedItems.accessory.length > 0 ? (\n//                 <div className=\"accessories\">\n//                   {selectedItems.accessory.map(accessory => (\n//                     <div key={accessory.id} className=\"item\">\n//                       <div className=\"item-image-wrapper\">\n//                         <img src={getImageUrl(accessory)} alt=\"Selected Accessory\" />\n//                       </div>\n//                       <div className=\"item-info\">\n//                         <div>Accessory</div>\n//                         <button onClick={() => removeSelectedItem(accessory, 'accessory')}>Remove</button>\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </div> */}\n//               {/* ) : (\n//                 <div className=\"empty-message\">No items selected</div>\n//               )}\n//             </div> */}\n//           </div>\n//         </div>\n//       ) : (\n//         <div className=\"outfit-view-mobile\">\n//           <div className=\"outfit-view-container-mobile\">\n//             <div className=\"outfit-view\">\n//               {Object.entries(filteredSelectedItems).map(([category, item]) => (\n//                 <div key={category} className=\"item\">\n//                   <div className=\"item-image-wrapper\">\n//                     <img src={getImageUrl(item)} alt=\"Selected Item\" />\n//                   </div>\n//                   <div className=\"item-info\">\n//                     <div>{category}</div>\n//                     <button className=\"outfit-remove-button\" onClick={() => removeSelectedItem(item, category)}>Remove</button>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//             {/* <div className=\"accessory-view\">\n//               {selectedItems.accessory.length > 0 ? (\n//                 <div className=\"accessories\">\n//                   {selectedItems.accessory.map(accessory => (\n//                     <div key={accessory.id} className=\"item\">\n//                       <div className=\"item-image-wrapper\">\n//                         <img src={getImageUrl(accessory)} alt=\"Selected Accessory\" />\n//                       </div>\n//                       <div className=\"item-info\">\n//                         <div>Accessory</div>\n//                         <button onClick={() => removeSelectedItem(accessory, 'accessory')}>Remove</button>\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </div>\n//               ) : (\n//                 <div className=\"empty-message\">No items selected</div>\n//               )}\n//             </div> */}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default OutfitView;","map":{"version":3,"names":[],"sources":["/Users/kristo/kristos-closet/client/closet-app/src/components/OutfitView.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { removeItem } from '../features/selectedItemsSlice.js'\n\n// const OutfitView = () => {\n//   const [isDesktop, setIsDesktop] = useState(false);\n\n//   const selectedItems = useSelector(state => state.selectedItems);\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     setIsDesktop(window.innerWidth >= 768);\n\n//     const handleResize = () => {\n//       setIsDesktop(window.innerWidth >= 768);\n//     };\n\n//     window.addEventListener('resize', handleResize);\n//     return () => {\n//       window.removeEventListener('resize', handleResize);\n//     };\n//   }, []);\n\n//   const removeSelectedItem = (item, category) => {\n//     dispatch(removeItem({ category, itemId: item.id }));\n//   };\n\n//   const filteredSelectedItems = Object.keys(selectedItems).reduce((acc, category) => {\n//     if (category !== \"accessory\") {\n//       acc[category] = selectedItems[category];\n//     }\n//     return acc;\n//   }, {});\n\n//   const getImageUrl = (imageData) => {\n//     if (!imageData) {\n//       console.error('Invalid image data:', imageData);\n//       return null;\n//     }\n\n//     return `data:${imageData.ContentType};base64,${imageData.imageData}`;\n//   };\n\n//   return (\n//     <div>\n//       {isDesktop ? (\n//         <div className=\"outfit-view-desktop\">\n//           <div className=\"outfit-view-container-desktop\">\n//             <div className=\"outfit-view\">\n//               {Object.entries(filteredSelectedItems).map(([category, item]) => (\n//                 <div key={category} className=\"item\">\n//                   <div className=\"item-image-wrapper\">\n//                     <img src={getImageUrl(item)} alt=\"Selected Item\" />\n//                   </div>\n//                   <div className=\"item-info\">\n//                     <div>{category}</div>\n//                     <button className=\"outfit-remove-button\" onClick={() => removeSelectedItem(item, category)}>Remove</button>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//             {/* <div className=\"accessory-view\">\n//               {selectedItems.accessory.length > 0 ? (\n//                 <div className=\"accessories\">\n//                   {selectedItems.accessory.map(accessory => (\n//                     <div key={accessory.id} className=\"item\">\n//                       <div className=\"item-image-wrapper\">\n//                         <img src={getImageUrl(accessory)} alt=\"Selected Accessory\" />\n//                       </div>\n//                       <div className=\"item-info\">\n//                         <div>Accessory</div>\n//                         <button onClick={() => removeSelectedItem(accessory, 'accessory')}>Remove</button>\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </div> */}\n//               {/* ) : (\n//                 <div className=\"empty-message\">No items selected</div>\n//               )}\n//             </div> */}\n//           </div>\n//         </div>\n//       ) : (\n//         <div className=\"outfit-view-mobile\">\n//           <div className=\"outfit-view-container-mobile\">\n//             <div className=\"outfit-view\">\n//               {Object.entries(filteredSelectedItems).map(([category, item]) => (\n//                 <div key={category} className=\"item\">\n//                   <div className=\"item-image-wrapper\">\n//                     <img src={getImageUrl(item)} alt=\"Selected Item\" />\n//                   </div>\n//                   <div className=\"item-info\">\n//                     <div>{category}</div>\n//                     <button className=\"outfit-remove-button\" onClick={() => removeSelectedItem(item, category)}>Remove</button>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//             {/* <div className=\"accessory-view\">\n//               {selectedItems.accessory.length > 0 ? (\n//                 <div className=\"accessories\">\n//                   {selectedItems.accessory.map(accessory => (\n//                     <div key={accessory.id} className=\"item\">\n//                       <div className=\"item-image-wrapper\">\n//                         <img src={getImageUrl(accessory)} alt=\"Selected Accessory\" />\n//                       </div>\n//                       <div className=\"item-info\">\n//                         <div>Accessory</div>\n//                         <button onClick={() => removeSelectedItem(accessory, 'accessory')}>Remove</button>\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </div>\n//               ) : (\n//                 <div className=\"empty-message\">No items selected</div>\n//               )}\n//             </div> */}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default OutfitView;"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\nconst initialState = {\n  isUploadingImage: false,\n  uploadError: null\n};\nexport const uploadImageAndMetaData = createAsyncThunk(\"upload/uploadImageAndMetaData\", async ({\n  imageFile,\n  dbFormData\n}) => {\n  try {\n    const token = localStorage.getItem(\"token\");\n    const headers = {\n      Authorization: `Bearer ${token}`\n    };\n    console.log(\"uploadSlice formData\", dbFormData);\n    const combinedFormData = new FormData();\n    combinedFormData.append(\"imageFile\", imageFile);\n    for (const [key, value] of dbFormData.entries()) {\n      combinedFormData.append(key, value);\n    }\n    await axios.post(\"http://localhost:5000/api/upload\", combinedFormData, {\n      headers\n    });\n    dispatch(uploadImageSuccess());\n  } catch (error) {\n    dispatch(uploadImageFailure(error));\n  }\n});\nconst uploadSlice = createSlice({\n  name: \"upload\",\n  initialState,\n  reducers: {\n    uploadImageRequest: state => {\n      state.isUploadingImage = true;\n      state.uploadError = null;\n    },\n    uploadImageSuccess: state => {\n      state.isUploadingImage = false;\n      state.uploadError = null;\n    },\n    uploadImageFailure: (state, action) => {\n      state.isUploadingImage = false;\n      state.uploadError = action.payload;\n    }\n  }\n});\nexport const {\n  uploadImageRequest,\n  uploadImageSuccess,\n  uploadImageFailure\n} = uploadSlice.actions;\nexport const selectIsUploadingImage = state => state.upload.isUploadingImage;\nexport const selectUploadError = state => state.upload.uploadError;\nexport const uploadSliceReducer = uploadSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","useDispatch","axios","initialState","isUploadingImage","uploadError","uploadImageAndMetaData","imageFile","dbFormData","token","localStorage","getItem","headers","Authorization","console","log","combinedFormData","FormData","append","key","value","entries","post","dispatch","uploadImageSuccess","error","uploadImageFailure","uploadSlice","name","reducers","uploadImageRequest","state","action","payload","actions","selectIsUploadingImage","upload","selectUploadError","uploadSliceReducer","reducer"],"sources":["/Users/kristo/kristos-closet/client/closet-app/src/features/uploadSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\n\nconst initialState = {\n  isUploadingImage: false,\n  uploadError: null,\n};\n\nexport const uploadImageAndMetaData = createAsyncThunk(\n  \"upload/uploadImageAndMetaData\",\n  async ({ imageFile, dbFormData } ) => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const headers = {\n        Authorization: `Bearer ${token}`,\n      };\n\n      console.log(\"uploadSlice formData\", dbFormData);\n\n      const combinedFormData = new FormData();\n      combinedFormData.append(\"imageFile\", imageFile);\n      for (const [key, value] of dbFormData.entries()) {\n        combinedFormData.append(key, value);\n      }\n\n      await axios.post(\"http://localhost:5000/api/upload\", combinedFormData, {\n        headers,\n      });\n\n      dispatch(uploadImageSuccess());\n    } catch (error) {\n      dispatch(uploadImageFailure(error));\n    }\n  }\n);\n\nconst uploadSlice = createSlice({\n  name: \"upload\",\n  initialState,\n  reducers: {\n    uploadImageRequest: (state) => {\n      state.isUploadingImage = true;\n      state.uploadError = null;\n    },\n    uploadImageSuccess: (state) => {\n      state.isUploadingImage = false;\n      state.uploadError = null;\n    },\n    uploadImageFailure: (state, action) => {\n      state.isUploadingImage = false;\n      state.uploadError = action.payload;\n    },\n  },\n});\n\nexport const {\n  uploadImageRequest,\n  uploadImageSuccess,\n  uploadImageFailure,\n} = uploadSlice.actions;\n\nexport const selectIsUploadingImage = (state) => state.upload.isUploadingImage;\nexport const selectUploadError = (state) => state.upload.uploadError;\n\nexport const uploadSliceReducer = uploadSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG;EACnBC,gBAAgB,EAAE,KAAK;EACvBC,WAAW,EAAE;AACf,CAAC;AAED,OAAO,MAAMC,sBAAsB,GAAGN,gBAAgB,CACpD,+BAA+B,EAC/B,OAAO;EAAEO,SAAS;EAAEC;AAAW,CAAC,KAAM;EACpC,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG;MACdC,aAAa,EAAG,UAASJ,KAAM;IACjC,CAAC;IAEDK,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEP,UAAU,CAAC;IAE/C,MAAMQ,gBAAgB,GAAG,IAAIC,QAAQ,CAAC,CAAC;IACvCD,gBAAgB,CAACE,MAAM,CAAC,WAAW,EAAEX,SAAS,CAAC;IAC/C,KAAK,MAAM,CAACY,GAAG,EAAEC,KAAK,CAAC,IAAIZ,UAAU,CAACa,OAAO,CAAC,CAAC,EAAE;MAC/CL,gBAAgB,CAACE,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC;IACrC;IAEA,MAAMlB,KAAK,CAACoB,IAAI,CAAC,kCAAkC,EAAEN,gBAAgB,EAAE;MACrEJ;IACF,CAAC,CAAC;IAEFW,QAAQ,CAACC,kBAAkB,CAAC,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,QAAQ,CAACG,kBAAkB,CAACD,KAAK,CAAC,CAAC;EACrC;AACF,CACF,CAAC;AAED,MAAME,WAAW,GAAG5B,WAAW,CAAC;EAC9B6B,IAAI,EAAE,QAAQ;EACdzB,YAAY;EACZ0B,QAAQ,EAAE;IACRC,kBAAkB,EAAGC,KAAK,IAAK;MAC7BA,KAAK,CAAC3B,gBAAgB,GAAG,IAAI;MAC7B2B,KAAK,CAAC1B,WAAW,GAAG,IAAI;IAC1B,CAAC;IACDmB,kBAAkB,EAAGO,KAAK,IAAK;MAC7BA,KAAK,CAAC3B,gBAAgB,GAAG,KAAK;MAC9B2B,KAAK,CAAC1B,WAAW,GAAG,IAAI;IAC1B,CAAC;IACDqB,kBAAkB,EAAEA,CAACK,KAAK,EAAEC,MAAM,KAAK;MACrCD,KAAK,CAAC3B,gBAAgB,GAAG,KAAK;MAC9B2B,KAAK,CAAC1B,WAAW,GAAG2B,MAAM,CAACC,OAAO;IACpC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXH,kBAAkB;EAClBN,kBAAkB;EAClBE;AACF,CAAC,GAAGC,WAAW,CAACO,OAAO;AAEvB,OAAO,MAAMC,sBAAsB,GAAIJ,KAAK,IAAKA,KAAK,CAACK,MAAM,CAAChC,gBAAgB;AAC9E,OAAO,MAAMiC,iBAAiB,GAAIN,KAAK,IAAKA,KAAK,CAACK,MAAM,CAAC/B,WAAW;AAEpE,OAAO,MAAMiC,kBAAkB,GAAGX,WAAW,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  isUploadingImage: false,\n  uploadError: null\n};\nexport const uploadImageAndMetaData = createAsyncThunk(\"user/uploadImageAndMetaData\", async ({\n  imageFile,\n  dbFormData\n}, {\n  dispatch\n}) => {\n  dispatch(uploadImageRequest());\n  try {\n    const token = localStorage.getItem(\"token\");\n    const headers = {\n      Authorization: `Bearer ${token}`\n    };\n    const combinedFormData = new FormData();\n    combinedFormData.append(\"imageFile\", imageFile);\n    for (const [key, value] of dbFormData.entries()) {\n      combinedFormData.append(key, value);\n    }\n    await axios.post(\"http://localhost:5000/api/upload\", combinedFormData, {\n      headers\n    });\n    dispatch(uploadImageSuccess());\n  } catch (error) {\n    dispatch(uploadImageFailure(error));\n  }\n});\nconst uploadSlice = createSlice({\n  name: \"upload\",\n  initialState,\n  reducers: {\n    uploadImageRequest: state => {\n      state.isUploadingImage = true;\n      state.uploadError = null;\n    },\n    uploadImageSuccess: state => {\n      state.isUploadingImage = false;\n      state.uploadError = null;\n    },\n    uploadImageFailure: (state, action) => {\n      state.isUploadingImage = false;\n      state.uploadError = action.payload;\n    }\n  }\n});\nexport const {\n  uploadImageRequest,\n  uploadImageSuccess,\n  uploadImageFailure\n} = uploadSlice.actions;\nexport const selectIsUploadingImage = state => state.upload.isUploadingImage;\nexport const selectUploadError = state => state.upload.uploadError;\nexport default uploadSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","isUploadingImage","uploadError","uploadImageAndMetaData","imageFile","dbFormData","dispatch","uploadImageRequest","token","localStorage","getItem","headers","Authorization","combinedFormData","FormData","append","key","value","entries","post","uploadImageSuccess","error","uploadImageFailure","uploadSlice","name","reducers","state","action","payload","actions","selectIsUploadingImage","upload","selectUploadError","reducer"],"sources":["/Users/kristo/kristos-closet/client/closet-app/src/features/uploadSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst initialState = {\n  isUploadingImage: false,\n  uploadError: null,\n};\n\nexport const uploadImageAndMetaData = createAsyncThunk(\n  \"user/uploadImageAndMetaData\",\n  async ({ imageFile, dbFormData }, { dispatch }) => {\n    dispatch(uploadImageRequest());\n    try {\n      const token = localStorage.getItem(\"token\");\n      const headers = {\n        Authorization: `Bearer ${token}`,\n      };\n\n      const combinedFormData = new FormData();\n      combinedFormData.append(\"imageFile\", imageFile);\n      for (const [key, value] of dbFormData.entries()) {\n        combinedFormData.append(key, value);\n      }\n\n      await axios.post(\"http://localhost:5000/api/upload\", combinedFormData, {\n        headers,\n      });\n\n      dispatch(uploadImageSuccess());\n    } catch (error) {\n      dispatch(uploadImageFailure(error));\n    }\n  }\n);\n\nconst uploadSlice = createSlice({\n  name: \"upload\",\n  initialState,\n  reducers: {\n    uploadImageRequest: (state) => {\n      state.isUploadingImage = true;\n      state.uploadError = null;\n    },\n    uploadImageSuccess: (state) => {\n      state.isUploadingImage = false;\n      state.uploadError = null;\n    },\n    uploadImageFailure: (state, action) => {\n      state.isUploadingImage = false;\n      state.uploadError = action.payload;\n    },\n  },\n});\n\nexport const {\n  uploadImageRequest,\n  uploadImageSuccess,\n  uploadImageFailure,\n} = uploadSlice.actions;\n\nexport const selectIsUploadingImage = (state) => state.upload.isUploadingImage;\nexport const selectUploadError = (state) => state.upload.uploadError;\n\nexport default uploadSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG;EACnBC,gBAAgB,EAAE,KAAK;EACvBC,WAAW,EAAE;AACf,CAAC;AAED,OAAO,MAAMC,sBAAsB,GAAGL,gBAAgB,CACpD,6BAA6B,EAC7B,OAAO;EAAEM,SAAS;EAAEC;AAAW,CAAC,EAAE;EAAEC;AAAS,CAAC,KAAK;EACjDA,QAAQ,CAACC,kBAAkB,CAAC,CAAC,CAAC;EAC9B,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG;MACdC,aAAa,EAAG,UAASJ,KAAM;IACjC,CAAC;IAED,MAAMK,gBAAgB,GAAG,IAAIC,QAAQ,CAAC,CAAC;IACvCD,gBAAgB,CAACE,MAAM,CAAC,WAAW,EAAEX,SAAS,CAAC;IAC/C,KAAK,MAAM,CAACY,GAAG,EAAEC,KAAK,CAAC,IAAIZ,UAAU,CAACa,OAAO,CAAC,CAAC,EAAE;MAC/CL,gBAAgB,CAACE,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC;IACrC;IAEA,MAAMlB,KAAK,CAACoB,IAAI,CAAC,kCAAkC,EAAEN,gBAAgB,EAAE;MACrEF;IACF,CAAC,CAAC;IAEFL,QAAQ,CAACc,kBAAkB,CAAC,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdf,QAAQ,CAACgB,kBAAkB,CAACD,KAAK,CAAC,CAAC;EACrC;AACF,CACF,CAAC;AAED,MAAME,WAAW,GAAG1B,WAAW,CAAC;EAC9B2B,IAAI,EAAE,QAAQ;EACdxB,YAAY;EACZyB,QAAQ,EAAE;IACRlB,kBAAkB,EAAGmB,KAAK,IAAK;MAC7BA,KAAK,CAACzB,gBAAgB,GAAG,IAAI;MAC7ByB,KAAK,CAACxB,WAAW,GAAG,IAAI;IAC1B,CAAC;IACDkB,kBAAkB,EAAGM,KAAK,IAAK;MAC7BA,KAAK,CAACzB,gBAAgB,GAAG,KAAK;MAC9ByB,KAAK,CAACxB,WAAW,GAAG,IAAI;IAC1B,CAAC;IACDoB,kBAAkB,EAAEA,CAACI,KAAK,EAAEC,MAAM,KAAK;MACrCD,KAAK,CAACzB,gBAAgB,GAAG,KAAK;MAC9ByB,KAAK,CAACxB,WAAW,GAAGyB,MAAM,CAACC,OAAO;IACpC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXrB,kBAAkB;EAClBa,kBAAkB;EAClBE;AACF,CAAC,GAAGC,WAAW,CAACM,OAAO;AAEvB,OAAO,MAAMC,sBAAsB,GAAIJ,KAAK,IAAKA,KAAK,CAACK,MAAM,CAAC9B,gBAAgB;AAC9E,OAAO,MAAM+B,iBAAiB,GAAIN,KAAK,IAAKA,KAAK,CAACK,MAAM,CAAC7B,WAAW;AAEpE,eAAeqB,WAAW,CAACU,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
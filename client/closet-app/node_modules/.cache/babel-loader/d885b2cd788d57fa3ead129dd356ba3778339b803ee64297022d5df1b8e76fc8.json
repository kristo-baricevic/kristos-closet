{"ast":null,"code":"const mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\nconst userSchema = new mongoose.Schema({\n  username: String,\n  email: String,\n  password: String,\n  isAdmin: {\n    type: Boolean,\n    default: false\n  }\n});\n\n// Hash the user's password before saving it to the databasee\nuserSchema.pre('save', async function (next) {\n  if (!this.isModified('password')) {\n    return next();\n  }\n  try {\n    const hashedPassword = await bcrypt.hash(this.password, 10);\n    this.password = hashedPassword;\n    return next();\n  } catch (error) {\n    return next(error);\n  }\n});\n\n// Compare the provided password with the stored hashed password\nuserSchema.methods.comparePassword = async function (candidatePassword) {\n  try {\n    return await bcrypt.compare(candidatePassword, this.password);\n  } catch (error) {\n    throw error;\n  }\n};\nconst User = mongoose.model('User', userSchema);\nmodule.exports = User;","map":{"version":3,"names":["mongoose","require","bcrypt","userSchema","Schema","username","String","email","password","isAdmin","type","Boolean","default","pre","next","isModified","hashedPassword","hash","error","methods","comparePassword","candidatePassword","compare","User","model","module","exports"],"sources":["/Users/kristo/kristos-closet/client/closet-app/src/models/User.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\n\nconst userSchema = new mongoose.Schema({\n  username: String,\n  email: String,\n  password: String, \n  isAdmin: { type: Boolean, default: false },\n});\n\n// Hash the user's password before saving it to the databasee\nuserSchema.pre('save', async function (next) {\n  if (!this.isModified('password')) {\n    return next();\n  }\n\n  try {\n    const hashedPassword = await bcrypt.hash(this.password, 10);\n    this.password = hashedPassword;\n    return next();\n  } catch (error) {\n    return next(error);\n  }\n});\n\n// Compare the provided password with the stored hashed password\nuserSchema.methods.comparePassword = async function (candidatePassword) {\n  try {\n    return await bcrypt.compare(candidatePassword, this.password);\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst User = mongoose.model('User', userSchema);\n\nmodule.exports = User;\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAME,UAAU,GAAG,IAAIH,QAAQ,CAACI,MAAM,CAAC;EACrCC,QAAQ,EAAEC,MAAM;EAChBC,KAAK,EAAED,MAAM;EACbE,QAAQ,EAAEF,MAAM;EAChBG,OAAO,EAAE;IAAEC,IAAI,EAAEC,OAAO;IAAEC,OAAO,EAAE;EAAM;AAC3C,CAAC,CAAC;;AAEF;AACAT,UAAU,CAACU,GAAG,CAAC,MAAM,EAAE,gBAAgBC,IAAI,EAAE;EAC3C,IAAI,CAAC,IAAI,CAACC,UAAU,CAAC,UAAU,CAAC,EAAE;IAChC,OAAOD,IAAI,CAAC,CAAC;EACf;EAEA,IAAI;IACF,MAAME,cAAc,GAAG,MAAMd,MAAM,CAACe,IAAI,CAAC,IAAI,CAACT,QAAQ,EAAE,EAAE,CAAC;IAC3D,IAAI,CAACA,QAAQ,GAAGQ,cAAc;IAC9B,OAAOF,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,OAAOJ,IAAI,CAACI,KAAK,CAAC;EACpB;AACF,CAAC,CAAC;;AAEF;AACAf,UAAU,CAACgB,OAAO,CAACC,eAAe,GAAG,gBAAgBC,iBAAiB,EAAE;EACtE,IAAI;IACF,OAAO,MAAMnB,MAAM,CAACoB,OAAO,CAACD,iBAAiB,EAAE,IAAI,CAACb,QAAQ,CAAC;EAC/D,CAAC,CAAC,OAAOU,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMK,IAAI,GAAGvB,QAAQ,CAACwB,KAAK,CAAC,MAAM,EAAErB,UAAU,CAAC;AAE/CsB,MAAM,CAACC,OAAO,GAAGH,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}
[{"/Users/kristo/kristos-closet/client/closet-app/src/index.js":"1","/Users/kristo/kristos-closet/client/closet-app/src/App.js":"2","/Users/kristo/kristos-closet/client/closet-app/src/seed.js":"3","/Users/kristo/kristos-closet/client/closet-app/src/store/store.js":"4","/Users/kristo/kristos-closet/client/closet-app/src/config/database.js":"5","/Users/kristo/kristos-closet/client/closet-app/src/store/reducers.js":"6","/Users/kristo/kristos-closet/client/closet-app/src/components/OutfitView.js":"7","/Users/kristo/kristos-closet/client/closet-app/src/components/NavBar.js":"8","/Users/kristo/kristos-closet/client/closet-app/src/components/LoginModal.js":"9","/Users/kristo/kristos-closet/client/closet-app/src/components/ImageUploader.js":"10","/Users/kristo/kristos-closet/client/closet-app/src/components/RegistrationModal.js":"11","/Users/kristo/kristos-closet/client/closet-app/src/store/actions.js":"12","/Users/kristo/kristos-closet/client/closet-app/src/components/ClosetView.js":"13","/Users/kristo/kristos-closet/client/closet-app/src/components/DemoButton.js":"14"},{"size":462,"mtime":1691848643549,"results":"15","hashOfConfig":"16"},{"size":4371,"mtime":1691848643546,"results":"17","hashOfConfig":"16"},{"size":661,"mtime":1691848643550,"results":"18","hashOfConfig":"16"},{"size":380,"mtime":1691848643551,"results":"19","hashOfConfig":"16"},{"size":1184,"mtime":1691848643548,"results":"20","hashOfConfig":"16"},{"size":1546,"mtime":1691874253295,"results":"21","hashOfConfig":"16"},{"size":4669,"mtime":1691848643547,"results":"22","hashOfConfig":"16"},{"size":1231,"mtime":1691848643547,"results":"23","hashOfConfig":"16"},{"size":2030,"mtime":1691848643547,"results":"24","hashOfConfig":"16"},{"size":2675,"mtime":1691874508502,"results":"25","hashOfConfig":"16"},{"size":2442,"mtime":1691848643548,"results":"26","hashOfConfig":"16"},{"size":4370,"mtime":1691874253295,"results":"27","hashOfConfig":"16"},{"size":9662,"mtime":1691848643547,"results":"28","hashOfConfig":"16"},{"size":380,"mtime":1691848643547,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},"lkshuj",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"34"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/kristo/kristos-closet/client/closet-app/src/index.js",["75"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport 'path-browserify';\n\nconst db = require('./config/database');\nrequire('./seed');\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);",[],"/Users/kristo/kristos-closet/client/closet-app/src/App.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/seed.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/store/store.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/config/database.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/store/reducers.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/components/OutfitView.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/components/NavBar.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/components/LoginModal.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/components/ImageUploader.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/components/RegistrationModal.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/store/actions.js",["76"],[],"/Users/kristo/kristos-closet/client/closet-app/src/components/ClosetView.js",["77","78"],[],"import React, { useState, useEffect } from 'react';\n\nconst ClosetView = ({ isAuthenticated }) => {\n  const [isDesktop, setIsDesktop] = useState(false);\n  const [images, setImages] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [editedCategory, setEditedCategory] = useState(null);\n  const [editingImageId, setEditingImageId] = useState(null);\n\n  useEffect(() => {\n    fetchImages();\n    checkScreenSize();\n    window.addEventListener('resize', checkScreenSize);\n    return () => {\n      window.removeEventListener('resize', checkScreenSize);\n    };\n  }, []);\n\n  const uniqueCategories = [...new Set(images.map(image => image.category))];\n\n  const filteredImages = selectedCategory\n    ? images.filter(image => image.category === selectedCategory)\n    : images;\n\n  const checkScreenSize = () => {\n    setIsDesktop(window.innerWidth >= 768);\n  };\n\n  const openImage = (image) => {\n    // Open the image when clicked\n  };\n\n  const getImageUrl = (imageData) => {\n    try {\n      if (!imageData) {\n        console.error('Invalid image data:', imageData);\n        return null;\n      }\n\n      const base64String = atob(imageData);\n      const bytes = new Uint8Array(base64String.length);\n\n      for (let i = 0; i < base64String.length; i++) {\n        bytes[i] = base64String.charCodeAt(i);\n      }\n\n      const blob = new Blob([bytes.buffer], { type: 'image/jpeg' });\n      return URL.createObjectURL(blob);\n    } catch (error) {\n      console.error('Error converting image data:', error);\n      return null;\n    }\n  };\n\n  const fetchImages = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const headers = {\n        Authorization: `Bearer ${token}`,\n      };\n\n      const response = await fetch('/backend/Images', { headers });\n      const data = await response.json();\n\n      const updatedImages = data.map((image) => ({\n        ...image,\n        isUserImage: image.userId !== null,\n      }));\n      setImages(updatedImages);\n    } catch (error) {\n      console.error('Failed to fetch images:', error);\n    }\n  };\n\n  const deleteImage = async (image) => {\n    if (!isAuthenticated) {\n      alert('You must be logged in to delete items.');\n      return;\n    }\n\n    if (!image.userId) {\n      alert('You cannot delete shared items.');\n      return;\n    }\n\n    try {\n      const response = await fetch(`/backend/Images/${image.id}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        await fetchImages();\n      } else {\n        console.error('Failed to delete image:', image.id);\n      }\n    } catch (error) {\n      console.error('Error deleting image:', error);\n    }\n  };\n\n  const handleEditImage = (image) => {\n    if (!isAuthenticated) {\n      alert('You must be logged in to edit items.');\n      return;\n    }\n\n    if (!image.userId) {\n      alert('You cannot edit shared images.');\n      return;\n    }\n\n    setEditingImageId(image.id);\n    setEditedCategory(image.category);\n  };\n\n  // const isUserClothingItem = async (imageId) => {\n  //   try {\n  //     const image = images.find((img) => img.id === imageId);\n  //     return image && image.isUserImage;\n  //   } catch (error) {\n  //     console.error('Error checking if the image belongs to UserClothingItem:', error);\n  //     return false;\n  //   }\n  // };\n\n  const isEditing = (image) => {\n    return editingImageId === image.id && image.isUserImage;\n  };\n\n  const saveImageEdit = async (image) => {\n    const updatedCategory = editedCategory.trim();\n    if (updatedCategory !== \"\") {\n      const foundImage = images.find((img) => img.id === image.id);\n      if (foundImage) {\n        foundImage.category = updatedCategory;\n      }\n\n      try {\n        const response = await fetch(`/backend/Images/${image.id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            category: updatedCategory,\n          }),\n        });\n\n        if (response.ok) {\n          const updatedImage = await response.json();\n          foundImage.category = updatedImage.category;\n        } else {\n          console.error('Failed to update image category:', response);\n        }\n      } catch (error) {\n        console.error('Error updating image category:', error);\n      }\n    }\n\n    setEditingImageId(null);\n    setEditedCategory(\"\");\n  };\n\n  const cancelImageEdit = () => {\n    setEditingImageId(null);\n    setEditedCategory(\"\");\n  };\n\n  const handleSelectImage = (image) => {\n    // Emit the selected image to the parent component\n    // this.$emit('selectImage', image);\n    console.log('handleSelectImage connected:', image);\n  };\n\n  const filterByCategory = (category) => {\n    setSelectedCategory(category);\n  };\n\n  return (\n    <div>\n      {isDesktop ? (\n        <div>\n          <div className=\"sticky-container\">\n            <div className=\"category-buttons-container\">\n              <button className=\"category-button\" onClick={() => filterByCategory(null)}>All</button>\n              {uniqueCategories.map(category => (\n                <button key={category} className=\"category-button\" onClick={() => filterByCategory(category)}>\n                  {category}\n                </button>\n              ))}\n            </div>\n          </div>\n          <div className=\"closet-view\">\n            {filteredImages.map(image => (\n              <div key={image.id} className=\"card\" onClick={() => openImage(image)}>\n                <img className=\"card-image\" src={getImageUrl(image.data)} alt=\"Photo\" />\n                <div className=\"card-info\">\n                  <div className=\"card-buttons-container\">\n                    <button className=\"delete-button\" onClick={() => deleteImage(image)}>Delete</button>\n                    <button className=\"select-button\" onClick={() => handleSelectImage(image)}>Select</button>\n                    <button className=\"edit-button\" onClick={() => handleEditImage(image)}>Edit</button>\n                  </div>\n                  <div className=\"category-container\">\n                    {isEditing(image) ? (\n                      <div className=\"edit-category\">\n                        <select\n                          value={editedCategory}\n                          onChange={event => setEditedCategory(event.target.value)}\n                          onKeyUp={event => {\n                            if (event.key === 'Enter') {\n                              saveImageEdit(image);\n                            }\n                          }}\n                        >\n                          {uniqueCategories.map(category => (\n                            <option key={category} value={category}>{category}</option>\n                          ))}\n                        </select>\n                        <button onClick={() => saveImageEdit(image)}>Save</button>\n                        <button onClick={() => cancelImageEdit()}>Cancel</button>\n                      </div>\n                    ) : (\n                      <div className=\"image-category\">{image.category}</div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ) : (\n        <div>\n          <div className=\"sticky-container\">\n            <div className=\"category-buttons-container\">\n              <button className=\"category-button\" onClick={() => filterByCategory(null)}>All</button>\n              {uniqueCategories.map(category => (\n                <button key={category} className=\"category-button\" onClick={() => filterByCategory(category)}>\n                  {category}\n                </button>\n              ))}\n            </div>\n          </div>\n          <div className=\"closet-view\">\n            {filteredImages.map(image => (\n              <div key={image.id} className=\"card\" onClick={() => openImage(image)}>\n                <img className=\"card-image\" src={getImageUrl(image.data)} alt=\"Photo\" />\n                <div className=\"card-info\">\n                  <div className=\"card-buttons-container\">\n                    <button className=\"delete-button\" onClick={() => deleteImage(image)}>Delete</button>\n                    <button className=\"select-button\" onClick={() => handleSelectImage(image)}>Select</button>\n                    <button className=\"edit-button\" onClick={() => handleEditImage(image)}>Edit</button>\n                  </div>\n                  <div className=\"category-container\">\n                    {isEditing(image) ? (\n                      <div className=\"edit-category\">\n                        <select\n                          value={editedCategory}\n                          onChange={event => setEditedCategory(event.target.value)}\n                          onKeyUp={event => {\n                            if (event.key === 'Enter') {\n                              saveImageEdit(image);\n                            }\n                          }}\n                        >\n                          {uniqueCategories.map(category => (\n                            <option key={category} value={category}>{category}</option>\n                          ))}\n                        </select>\n                        <button onClick={() => saveImageEdit(image)}>Save</button>\n                        <button onClick={() => cancelImageEdit()}>Cancel</button>\n                      </div>\n                    ) : (\n                      <div className=\"image-category\">{image.category}</div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ClosetView;\n","/Users/kristo/kristos-closet/client/closet-app/src/components/DemoButton.js",[],[],{"ruleId":"79","severity":1,"message":"80","line":9,"column":7,"nodeType":"81","messageId":"82","endLine":9,"endColumn":9},{"ruleId":"79","severity":1,"message":"83","line":119,"column":13,"nodeType":"81","messageId":"82","endLine":119,"endColumn":20},{"ruleId":"84","severity":1,"message":"85","line":196,"column":17,"nodeType":"86","endLine":196,"endColumn":89},{"ruleId":"84","severity":1,"message":"85","line":246,"column":17,"nodeType":"86","endLine":246,"endColumn":89},"no-unused-vars","'db' is assigned a value but never used.","Identifier","unusedVar","'headers' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]
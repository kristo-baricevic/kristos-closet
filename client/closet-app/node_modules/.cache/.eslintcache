[{"/Users/kristo/kristos-closet/client/closet-app/src/index.js":"1","/Users/kristo/kristos-closet/client/closet-app/src/seed.js":"2","/Users/kristo/kristos-closet/client/closet-app/src/App.js":"3","/Users/kristo/kristos-closet/client/closet-app/src/config/database.js":"4","/Users/kristo/kristos-closet/client/closet-app/src/store/store.js":"5","/Users/kristo/kristos-closet/client/closet-app/src/components/ImageUploader.js":"6","/Users/kristo/kristos-closet/client/closet-app/src/components/RegistrationModal.js":"7","/Users/kristo/kristos-closet/client/closet-app/src/components/NavBar.js":"8","/Users/kristo/kristos-closet/client/closet-app/src/components/LoginModal.js":"9","/Users/kristo/kristos-closet/client/closet-app/src/components/OutfitView.js":"10","/Users/kristo/kristos-closet/client/closet-app/src/components/PhotoStream.js":"11","/Users/kristo/kristos-closet/client/closet-app/src/store/reducers.js":"12","/Users/kristo/kristos-closet/client/closet-app/src/store/actions.js":"13"},{"size":462,"mtime":1691603482556,"results":"14","hashOfConfig":"15"},{"size":661,"mtime":1691592132783,"results":"16","hashOfConfig":"15"},{"size":4381,"mtime":1691796337303,"results":"17","hashOfConfig":"15"},{"size":1184,"mtime":1691594278380,"results":"18","hashOfConfig":"15"},{"size":380,"mtime":1691701057385,"results":"19","hashOfConfig":"15"},{"size":2789,"mtime":1691444624598,"results":"20","hashOfConfig":"15"},{"size":2411,"mtime":1691794250619,"results":"21","hashOfConfig":"15"},{"size":1347,"mtime":1691684604825,"results":"22","hashOfConfig":"15"},{"size":2030,"mtime":1691794557830,"results":"23","hashOfConfig":"15"},{"size":4669,"mtime":1691795093176,"results":"24","hashOfConfig":"15"},{"size":9666,"mtime":1691465227920,"results":"25","hashOfConfig":"15"},{"size":1546,"mtime":1691788273064,"results":"26","hashOfConfig":"15"},{"size":2458,"mtime":1691788273064,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"lkshuj",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kristo/kristos-closet/client/closet-app/src/index.js",["70"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport 'path-browserify';\n\nconst db = require('./config/database');\nrequire('./seed');\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);","/Users/kristo/kristos-closet/client/closet-app/src/seed.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/App.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/config/database.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/store/store.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/components/ImageUploader.js",["71"],[],"import React, { Component } from 'react';\n\nclass ImageUploader extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      imageUrl: null,\n      selectedCategory: '',\n    };\n  }\n\n  handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    this.setState({ imageUrl: URL.createObjectURL(file) });\n  }\n\n  classifyImage = (event) => {\n    event.preventDefault();\n\n    // Check if the user is authenticated and show an alert if they are not\n    if (!this.props.isAuthenticated) {\n      alert('You need to be logged in to upload an image.');\n      return;\n    }\n\n    const file = document.getElementById('imageFile').files[0];\n    const formData = new FormData();\n    formData.append('imageFile', file);\n    formData.append('category', this.state.selectedCategory);\n    formData.append('userId', this.props.user.id);\n\n    // Get the JWT token from local storage\n    const token = localStorage.getItem('token');\n    console.log(token);\n\n    fetch('/backend/Upload', {\n      method: 'POST',\n      body: formData,\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    })\n    .then(response => response.json())\n    .then(data => {\n      // Handle the response from the backend\n      this.setState({ imageUrl: null });\n      this.props.onImageUploaded();\n      console.log(data);\n    })\n    .catch(error => {\n      // Handle the error\n      console.log(error);\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2 className=\"upload-title\">Upload Your Article of Clothing</h2>\n        <div className=\"upload-container\">\n          <form id=\"imageForm\" onSubmit={this.classifyImage}>\n            <label htmlFor=\"category\">Category:</label>\n            <select id=\"category\" value={this.state.selectedCategory} onChange={(e) => this.setState({ selectedCategory: e.target.value })} required>\n              <option value=\"Top\">Top</option>\n              <option value=\"Bottom\">Bottom</option>\n              <option value=\"onePiece\">One-piece</option>\n              <option value=\"Shoes\">Shoes</option>\n              <option value=\"Hat\">Hat</option>\n              <option value=\"Accessory\">Accessory</option>\n            </select>\n            <label className=\"choose-file\">\n              <input type=\"file\" id=\"imageFile\" accept=\".jpg,.jpeg,.png,.gif\" required onChange={this.handleFileUpload} />\n              Choose File\n            </label>\n            <button className=\"classify-button\" id=\"classifyButton\" type=\"submit\">Upload Image</button>\n          </form>\n        </div>\n\n        <p id=\"resultLabel\"></p>\n\n        <div id=\"imageContainer\">\n          {this.state.imageUrl && <img id=\"uploadedImage\" alt=\"Uploaded Image\" src={this.state.imageUrl} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ImageUploader;\n","/Users/kristo/kristos-closet/client/closet-app/src/components/RegistrationModal.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/components/NavBar.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/components/LoginModal.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/components/OutfitView.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/components/PhotoStream.js",["72","73"],[],"import React, { useState, useEffect } from 'react';\n\nconst PhotoStream = ({ isAuthenticated }) => {\n  const [isDesktop, setIsDesktop] = useState(false);\n  const [images, setImages] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [editedCategory, setEditedCategory] = useState(null);\n  const [editingImageId, setEditingImageId] = useState(null);\n\n  useEffect(() => {\n    fetchImages();\n    checkScreenSize();\n    window.addEventListener('resize', checkScreenSize);\n    return () => {\n      window.removeEventListener('resize', checkScreenSize);\n    };\n  }, []);\n\n  const uniqueCategories = [...new Set(images.map(image => image.category))];\n\n  const filteredImages = selectedCategory\n    ? images.filter(image => image.category === selectedCategory)\n    : images;\n\n  const checkScreenSize = () => {\n    setIsDesktop(window.innerWidth >= 768);\n  };\n\n  const openImage = (image) => {\n    // Open the image when clicked\n  };\n\n  const getImageUrl = (imageData) => {\n    try {\n      if (!imageData) {\n        console.error('Invalid image data:', imageData);\n        return null;\n      }\n\n      const base64String = atob(imageData);\n      const bytes = new Uint8Array(base64String.length);\n\n      for (let i = 0; i < base64String.length; i++) {\n        bytes[i] = base64String.charCodeAt(i);\n      }\n\n      const blob = new Blob([bytes.buffer], { type: 'image/jpeg' });\n      return URL.createObjectURL(blob);\n    } catch (error) {\n      console.error('Error converting image data:', error);\n      return null;\n    }\n  };\n\n  const fetchImages = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const headers = {\n        Authorization: `Bearer ${token}`,\n      };\n\n      const response = await fetch('/backend/Images', { headers });\n      const data = await response.json();\n\n      const updatedImages = data.map((image) => ({\n        ...image,\n        isUserImage: image.userId !== null,\n      }));\n      setImages(updatedImages);\n    } catch (error) {\n      console.error('Failed to fetch images:', error);\n    }\n  };\n\n  const deleteImage = async (image) => {\n    if (!isAuthenticated) {\n      alert('You must be logged in to delete items.');\n      return;\n    }\n\n    if (!image.userId) {\n      alert('You cannot delete shared items.');\n      return;\n    }\n\n    try {\n      const response = await fetch(`/backend/Images/${image.id}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        await fetchImages();\n      } else {\n        console.error('Failed to delete image:', image.id);\n      }\n    } catch (error) {\n      console.error('Error deleting image:', error);\n    }\n  };\n\n  const handleEditImage = (image) => {\n    if (!isAuthenticated) {\n      alert('You must be logged in to edit items.');\n      return;\n    }\n\n    if (!image.userId) {\n      alert('You cannot edit shared images.');\n      return;\n    }\n\n    setEditingImageId(image.id);\n    setEditedCategory(image.category);\n  };\n\n  // const isUserClothingItem = async (imageId) => {\n  //   try {\n  //     const image = images.find((img) => img.id === imageId);\n  //     return image && image.isUserImage;\n  //   } catch (error) {\n  //     console.error('Error checking if the image belongs to UserClothingItem:', error);\n  //     return false;\n  //   }\n  // };\n\n  const isEditing = (image) => {\n    return editingImageId === image.id && image.isUserImage;\n  };\n\n  const saveImageEdit = async (image) => {\n    const updatedCategory = editedCategory.trim();\n    if (updatedCategory !== \"\") {\n      const foundImage = images.find((img) => img.id === image.id);\n      if (foundImage) {\n        foundImage.category = updatedCategory;\n      }\n\n      try {\n        const response = await fetch(`/backend/Images/${image.id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            category: updatedCategory,\n          }),\n        });\n\n        if (response.ok) {\n          const updatedImage = await response.json();\n          foundImage.category = updatedImage.category;\n        } else {\n          console.error('Failed to update image category:', response);\n        }\n      } catch (error) {\n        console.error('Error updating image category:', error);\n      }\n    }\n\n    setEditingImageId(null);\n    setEditedCategory(\"\");\n  };\n\n  const cancelImageEdit = () => {\n    setEditingImageId(null);\n    setEditedCategory(\"\");\n  };\n\n  const handleSelectImage = (image) => {\n    // Emit the selected image to the parent component\n    // this.$emit('selectImage', image);\n    console.log('handleSelectImage connected:', image);\n  };\n\n  const filterByCategory = (category) => {\n    setSelectedCategory(category);\n  };\n\n  return (\n    <div>\n      {isDesktop ? (\n        <div>\n          <div className=\"sticky-container\">\n            <div className=\"category-buttons-container\">\n              <button className=\"category-button\" onClick={() => filterByCategory(null)}>All</button>\n              {uniqueCategories.map(category => (\n                <button key={category} className=\"category-button\" onClick={() => filterByCategory(category)}>\n                  {category}\n                </button>\n              ))}\n            </div>\n          </div>\n          <div className=\"photo-stream\">\n            {filteredImages.map(image => (\n              <div key={image.id} className=\"card\" onClick={() => openImage(image)}>\n                <img className=\"card-image\" src={getImageUrl(image.data)} alt=\"Photo\" />\n                <div className=\"card-info\">\n                  <div className=\"card-buttons-container\">\n                    <button className=\"delete-button\" onClick={() => deleteImage(image)}>Delete</button>\n                    <button className=\"select-button\" onClick={() => handleSelectImage(image)}>Select</button>\n                    <button className=\"edit-button\" onClick={() => handleEditImage(image)}>Edit</button>\n                  </div>\n                  <div className=\"category-container\">\n                    {isEditing(image) ? (\n                      <div className=\"edit-category\">\n                        <select\n                          value={editedCategory}\n                          onChange={event => setEditedCategory(event.target.value)}\n                          onKeyUp={event => {\n                            if (event.key === 'Enter') {\n                              saveImageEdit(image);\n                            }\n                          }}\n                        >\n                          {uniqueCategories.map(category => (\n                            <option key={category} value={category}>{category}</option>\n                          ))}\n                        </select>\n                        <button onClick={() => saveImageEdit(image)}>Save</button>\n                        <button onClick={() => cancelImageEdit()}>Cancel</button>\n                      </div>\n                    ) : (\n                      <div className=\"image-category\">{image.category}</div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ) : (\n        <div>\n          <div className=\"sticky-container\">\n            <div className=\"category-buttons-container\">\n              <button className=\"category-button\" onClick={() => filterByCategory(null)}>All</button>\n              {uniqueCategories.map(category => (\n                <button key={category} className=\"category-button\" onClick={() => filterByCategory(category)}>\n                  {category}\n                </button>\n              ))}\n            </div>\n          </div>\n          <div className=\"photo-stream\">\n            {filteredImages.map(image => (\n              <div key={image.id} className=\"card\" onClick={() => openImage(image)}>\n                <img className=\"card-image\" src={getImageUrl(image.data)} alt=\"Photo\" />\n                <div className=\"card-info\">\n                  <div className=\"card-buttons-container\">\n                    <button className=\"delete-button\" onClick={() => deleteImage(image)}>Delete</button>\n                    <button className=\"select-button\" onClick={() => handleSelectImage(image)}>Select</button>\n                    <button className=\"edit-button\" onClick={() => handleEditImage(image)}>Edit</button>\n                  </div>\n                  <div className=\"category-container\">\n                    {isEditing(image) ? (\n                      <div className=\"edit-category\">\n                        <select\n                          value={editedCategory}\n                          onChange={event => setEditedCategory(event.target.value)}\n                          onKeyUp={event => {\n                            if (event.key === 'Enter') {\n                              saveImageEdit(image);\n                            }\n                          }}\n                        >\n                          {uniqueCategories.map(category => (\n                            <option key={category} value={category}>{category}</option>\n                          ))}\n                        </select>\n                        <button onClick={() => saveImageEdit(image)}>Save</button>\n                        <button onClick={() => cancelImageEdit()}>Cancel</button>\n                      </div>\n                    ) : (\n                      <div className=\"image-category\">{image.category}</div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PhotoStream;\n","/Users/kristo/kristos-closet/client/closet-app/src/store/reducers.js",[],[],"/Users/kristo/kristos-closet/client/closet-app/src/store/actions.js",[],[],{"ruleId":"74","severity":1,"message":"75","line":9,"column":7,"nodeType":"76","messageId":"77","endLine":9,"endColumn":9},{"ruleId":"78","severity":1,"message":"79","line":83,"column":35,"nodeType":"80","endLine":83,"endColumn":108},{"ruleId":"78","severity":1,"message":"79","line":196,"column":17,"nodeType":"80","endLine":196,"endColumn":89},{"ruleId":"78","severity":1,"message":"79","line":246,"column":17,"nodeType":"80","endLine":246,"endColumn":89},"no-unused-vars","'db' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]